/*

 */
// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"

	v1 "github.com/activatedio/certmanager-webhook-resource/pkg/apis/resource.cert-manager.activated.io/v1"
	scheme "github.com/activatedio/certmanager-webhook-resource/pkg/generated/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// ACMEDNSChallengesGetter has a method to return a ACMEDNSChallengeInterface.
// A group's client should implement this interface.
type ACMEDNSChallengesGetter interface {
	ACMEDNSChallenges(namespace string) ACMEDNSChallengeInterface
}

// ACMEDNSChallengeInterface has methods to work with ACMEDNSChallenge resources.
type ACMEDNSChallengeInterface interface {
	Create(ctx context.Context, aCMEDNSChallenge *v1.ACMEDNSChallenge, opts metav1.CreateOptions) (*v1.ACMEDNSChallenge, error)
	Update(ctx context.Context, aCMEDNSChallenge *v1.ACMEDNSChallenge, opts metav1.UpdateOptions) (*v1.ACMEDNSChallenge, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, aCMEDNSChallenge *v1.ACMEDNSChallenge, opts metav1.UpdateOptions) (*v1.ACMEDNSChallenge, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.ACMEDNSChallenge, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.ACMEDNSChallengeList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.ACMEDNSChallenge, err error)
	ACMEDNSChallengeExpansion
}

// aCMEDNSChallenges implements ACMEDNSChallengeInterface
type aCMEDNSChallenges struct {
	*gentype.ClientWithList[*v1.ACMEDNSChallenge, *v1.ACMEDNSChallengeList]
}

// newACMEDNSChallenges returns a ACMEDNSChallenges
func newACMEDNSChallenges(c *ResourceV1Client, namespace string) *aCMEDNSChallenges {
	return &aCMEDNSChallenges{
		gentype.NewClientWithList[*v1.ACMEDNSChallenge, *v1.ACMEDNSChallengeList](
			"acmednschallenges",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1.ACMEDNSChallenge { return &v1.ACMEDNSChallenge{} },
			func() *v1.ACMEDNSChallengeList { return &v1.ACMEDNSChallengeList{} }),
	}
}

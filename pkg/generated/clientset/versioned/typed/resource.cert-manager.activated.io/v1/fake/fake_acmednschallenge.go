/*

 */
// Code generated by main. DO NOT EDIT.

package fake

import (
	"context"

	v1 "github.com/activatedio/certmanager-webhook-resource/pkg/apis/resource.cert-manager.activated.io/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeACMEDNSChallenges implements ACMEDNSChallengeInterface
type FakeACMEDNSChallenges struct {
	Fake *FakeResourceV1
	ns   string
}

var acmednschallengesResource = v1.SchemeGroupVersion.WithResource("acmednschallenges")

var acmednschallengesKind = v1.SchemeGroupVersion.WithKind("ACMEDNSChallenge")

// Get takes name of the aCMEDNSChallenge, and returns the corresponding aCMEDNSChallenge object, and an error if there is any.
func (c *FakeACMEDNSChallenges) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.ACMEDNSChallenge, err error) {
	emptyResult := &v1.ACMEDNSChallenge{}
	obj, err := c.Fake.
		Invokes(testing.NewGetActionWithOptions(acmednschallengesResource, c.ns, name, options), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.ACMEDNSChallenge), err
}

// List takes label and field selectors, and returns the list of ACMEDNSChallenges that match those selectors.
func (c *FakeACMEDNSChallenges) List(ctx context.Context, opts metav1.ListOptions) (result *v1.ACMEDNSChallengeList, err error) {
	emptyResult := &v1.ACMEDNSChallengeList{}
	obj, err := c.Fake.
		Invokes(testing.NewListActionWithOptions(acmednschallengesResource, acmednschallengesKind, c.ns, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1.ACMEDNSChallengeList{ListMeta: obj.(*v1.ACMEDNSChallengeList).ListMeta}
	for _, item := range obj.(*v1.ACMEDNSChallengeList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested aCMEDNSChallenges.
func (c *FakeACMEDNSChallenges) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchActionWithOptions(acmednschallengesResource, c.ns, opts))

}

// Create takes the representation of a aCMEDNSChallenge and creates it.  Returns the server's representation of the aCMEDNSChallenge, and an error, if there is any.
func (c *FakeACMEDNSChallenges) Create(ctx context.Context, aCMEDNSChallenge *v1.ACMEDNSChallenge, opts metav1.CreateOptions) (result *v1.ACMEDNSChallenge, err error) {
	emptyResult := &v1.ACMEDNSChallenge{}
	obj, err := c.Fake.
		Invokes(testing.NewCreateActionWithOptions(acmednschallengesResource, c.ns, aCMEDNSChallenge, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.ACMEDNSChallenge), err
}

// Update takes the representation of a aCMEDNSChallenge and updates it. Returns the server's representation of the aCMEDNSChallenge, and an error, if there is any.
func (c *FakeACMEDNSChallenges) Update(ctx context.Context, aCMEDNSChallenge *v1.ACMEDNSChallenge, opts metav1.UpdateOptions) (result *v1.ACMEDNSChallenge, err error) {
	emptyResult := &v1.ACMEDNSChallenge{}
	obj, err := c.Fake.
		Invokes(testing.NewUpdateActionWithOptions(acmednschallengesResource, c.ns, aCMEDNSChallenge, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.ACMEDNSChallenge), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeACMEDNSChallenges) UpdateStatus(ctx context.Context, aCMEDNSChallenge *v1.ACMEDNSChallenge, opts metav1.UpdateOptions) (result *v1.ACMEDNSChallenge, err error) {
	emptyResult := &v1.ACMEDNSChallenge{}
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceActionWithOptions(acmednschallengesResource, "status", c.ns, aCMEDNSChallenge, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.ACMEDNSChallenge), err
}

// Delete takes name of the aCMEDNSChallenge and deletes it. Returns an error if one occurs.
func (c *FakeACMEDNSChallenges) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(acmednschallengesResource, c.ns, name, opts), &v1.ACMEDNSChallenge{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeACMEDNSChallenges) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	action := testing.NewDeleteCollectionActionWithOptions(acmednschallengesResource, c.ns, opts, listOpts)

	_, err := c.Fake.Invokes(action, &v1.ACMEDNSChallengeList{})
	return err
}

// Patch applies the patch and returns the patched aCMEDNSChallenge.
func (c *FakeACMEDNSChallenges) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.ACMEDNSChallenge, err error) {
	emptyResult := &v1.ACMEDNSChallenge{}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceActionWithOptions(acmednschallengesResource, c.ns, name, pt, data, opts, subresources...), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.ACMEDNSChallenge), err
}
